[*] Start mutation process:
   - targets: accounting.views
   - tests: accounting.nadia_tests.LibraryNadiaTest
[*] 1 tests passed:
   - accounting.nadia_tests.LibraryNadiaTest [0.21405 s]
[*] Start mutants generation and execution:
   - [#   1] AOR accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get + paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.21708 s] survived
   - [#   2] CRP accounting.views:12 : 
--------------------------------------------------------------------------------
  8: 
  9: 
 10: @save_request
 11: def add_income(request):
~12:     add_transaction(request.GET['mutpy'], request.GET['amount'], )
 13:     status = 200
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
--------------------------------------------------------------------------------
[0.01537 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   3] CRP accounting.views:12 : 
--------------------------------------------------------------------------------
  8: 
  9: 
 10: @save_request
 11: def add_income(request):
~12:     add_transaction(request.GET[''], request.GET['amount'], )
 13:     status = 200
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
--------------------------------------------------------------------------------
[0.01058 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   4] CRP accounting.views:12 : 
--------------------------------------------------------------------------------
  8: 
  9: 
 10: @save_request
 11: def add_income(request):
~12:     add_transaction(request.GET['date'], request.GET['mutpy'], )
 13:     status = 200
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
--------------------------------------------------------------------------------
[0.01026 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   5] CRP accounting.views:12 : 
--------------------------------------------------------------------------------
  8: 
  9: 
 10: @save_request
 11: def add_income(request):
~12:     add_transaction(request.GET['date'], request.GET[''], )
 13:     status = 200
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
--------------------------------------------------------------------------------
[0.01097 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   6] CRP accounting.views:13 : 
--------------------------------------------------------------------------------
  9: 
 10: @save_request
 11: def add_income(request):
 12:     add_transaction(request.GET['date'], request.GET['amount'], )
~13:     status = 201
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
 18: @save_request
--------------------------------------------------------------------------------
[0.01450 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   7] CRP accounting.views:20 : 
--------------------------------------------------------------------------------
 16: 
 17: 
 18: @save_request
 19: def add_outgoing(request):
~20:     date = request.GET['mutpy']
 21:     amount = request.GET['amount']
 22:     add_transaction(date, amount)
 23:     return HttpResponse(status=200)
 24: 
 25: 
--------------------------------------------------------------------------------
[0.01700 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   8] CRP accounting.views:20 : 
--------------------------------------------------------------------------------
 16: 
 17: 
 18: @save_request
 19: def add_outgoing(request):
~20:     date = request.GET['']
 21:     amount = request.GET['amount']
 22:     add_transaction(date, amount)
 23:     return HttpResponse(status=200)
 24: 
 25: 
--------------------------------------------------------------------------------
[0.01504 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#   9] CRP accounting.views:21 : 
--------------------------------------------------------------------------------
 17: 
 18: @save_request
 19: def add_outgoing(request):
 20:     date = request.GET['date']
~21:     amount = request.GET['mutpy']
 22:     add_transaction(date, amount)
 23:     return HttpResponse(status=200)
 24: 
 25: 
 26: 
--------------------------------------------------------------------------------
[0.01530 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  10] CRP accounting.views:21 : 
--------------------------------------------------------------------------------
 17: 
 18: @save_request
 19: def add_outgoing(request):
 20:     date = request.GET['date']
~21:     amount = request.GET['']
 22:     add_transaction(date, amount)
 23:     return HttpResponse(status=200)
 24: 
 25: 
 26: 
--------------------------------------------------------------------------------
[0.01434 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  11] CRP accounting.views:23 : 
--------------------------------------------------------------------------------
 19: def add_outgoing(request):
 20:     date = request.GET['date']
 21:     amount = request.GET['amount']
 22:     add_transaction(date, amount)
~23:     return HttpResponse(status=201)
 24: 
 25: 
 26: 
 27: def list_transactions(request):
 28:     transactions = Transaction.objects.all()
--------------------------------------------------------------------------------
[0.01616 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  12] CRP accounting.views:29 : 
--------------------------------------------------------------------------------
 25: 
 26: 
 27: def list_transactions(request):
 28:     transactions = Transaction.objects.all()
~29:     return render(request, 'mutpy', {'transactions': transactions})
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
--------------------------------------------------------------------------------
[0.19058 s] survived
   - [#  13] CRP accounting.views:29 : 
--------------------------------------------------------------------------------
 25: 
 26: 
 27: def list_transactions(request):
 28:     transactions = Transaction.objects.all()
~29:     return render(request, '', {'transactions': transactions})
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
--------------------------------------------------------------------------------
[0.18924 s] survived
   - [#  14] CRP accounting.views:29 : 
--------------------------------------------------------------------------------
 25: 
 26: 
 27: def list_transactions(request):
 28:     transactions = Transaction.objects.all()
~29:     return render(request, 'accounting.html', {'mutpy': transactions})
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
--------------------------------------------------------------------------------
[0.18657 s] survived
   - [#  15] CRP accounting.views:29 : 
--------------------------------------------------------------------------------
 25: 
 26: 
 27: def list_transactions(request):
 28:     transactions = Transaction.objects.all()
~29:     return render(request, 'accounting.html', {'': transactions})
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
--------------------------------------------------------------------------------
[0.19119 s] survived
   - [#  16] CRP accounting.views:34 : 
--------------------------------------------------------------------------------
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
~34:     start = request.GET['mutpy']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
 38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
--------------------------------------------------------------------------------
[0.01569 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  17] CRP accounting.views:34 : 
--------------------------------------------------------------------------------
 30: 
 31: 
 32: @save_request
 33: def filter_by_date(request):
~34:     start = request.GET['']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
 38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
--------------------------------------------------------------------------------
[0.01614 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  18] CRP accounting.views:35 : 
--------------------------------------------------------------------------------
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
~35:     end = request.GET['mutpy']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
 38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
--------------------------------------------------------------------------------
[0.01585 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  19] CRP accounting.views:35 : 
--------------------------------------------------------------------------------
 31: 
 32: @save_request
 33: def filter_by_date(request):
 34:     start = request.GET['start']
~35:     end = request.GET['']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
 38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
--------------------------------------------------------------------------------
[0.01489 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  20] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('mutpy', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.02199 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  21] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.01969 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  22] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'mutpy': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.18850 s] survived
   - [#  23] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.18358 s] survived
   - [#  24] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'mutpy': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.19056 s] survived
   - [#  25] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, '': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.19077 s] survived
   - [#  26] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'mutpy': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.19907 s] survived
   - [#  27] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, '': get, 'reminded': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.19396 s] survived
   - [#  28] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'mutpy': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.18893 s] survived
   - [#  29] CRP accounting.views:38 : 
--------------------------------------------------------------------------------
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
~38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, '': get - paid})
 39: 
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
--------------------------------------------------------------------------------
[0.18414 s] survived
   - [#  30] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, 'mutpy', {'transactions': Transaction.objects.all()}, status=200 if res else 500)
--------------------------------------------------------------------------------
[0.02218 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  31] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, '', {'transactions': Transaction.objects.all()}, status=200 if res else 500)
--------------------------------------------------------------------------------
[0.02430 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  32] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, 'accounting.html', {'mutpy': Transaction.objects.all()}, status=200 if res else 500)
--------------------------------------------------------------------------------
[0.02673 s] survived
   - [#  33] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, 'accounting.html', {'': Transaction.objects.all()}, status=200 if res else 500)
--------------------------------------------------------------------------------
[0.02836 s] survived
   - [#  34] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, 'accounting.html', {'transactions': Transaction.objects.all()}, status=201 if res else 500)
--------------------------------------------------------------------------------
[0.11163 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  35] CRP accounting.views:44 : 
--------------------------------------------------------------------------------
 40: 
 41: @save_request
 42: def remove_transaction(request, id):
 43:     res = remove_transaction_by_id(id)
~44:     return render(request, 'accounting.html', {'transactions': Transaction.objects.all()}, status=200 if res else 501)
--------------------------------------------------------------------------------
[0.18525 s] killed by test_urls (accounting.nadia_tests.LibraryNadiaTest)
   - [#  36] DDL accounting.views:10 : 
--------------------------------------------------------------------------------
  6: from accounting.models import Transaction
  7: from ajax_testing.decorators import save_request
  8: 
  9: 
~10: def add_income(request):
 11:     
 12:     add_transaction(request.GET['date'], request.GET['amount'], )
 13:     status = 200
 14:     return HttpResponse(status=status)
 15: 
--------------------------------------------------------------------------------
[0.19368 s] survived
   - [#  37] DDL accounting.views:18 : 
--------------------------------------------------------------------------------
 14:     return HttpResponse(status=status)
 15: 
 16: 
 17: 
~18: def add_outgoing(request):
 19:     
 20:     date = request.GET['date']
 21:     amount = request.GET['amount']
 22:     add_transaction(date, amount)
 23:     return HttpResponse(status=200)
--------------------------------------------------------------------------------
[0.19270 s] survived
   - [#  38] DDL accounting.views:32 : 
--------------------------------------------------------------------------------
 28:     transactions = Transaction.objects.all()
 29:     return render(request, 'accounting.html', {'transactions': transactions})
 30: 
 31: 
~32: def filter_by_date(request):
 33:     
 34:     start = request.GET['start']
 35:     end = request.GET['end']
 36:     transactions = get_transactions_by_date(start, end)
 37:     (get, paid) = get_sum(transactions)
--------------------------------------------------------------------------------
[0.18617 s] survived
   - [#  39] DDL accounting.views:41 : 
--------------------------------------------------------------------------------
 37:     (get, paid) = get_sum(transactions)
 38:     return render_to_response('accounting.html', {'transactions': transactions, 'paid': paid, 'get': get, 'reminded': get - paid})
 39: 
 40: 
~41: def remove_transaction(request, id):
 42:     
 43:     res = remove_transaction_by_id(id)
 44:     return render(request, 'accounting.html', {'transactions': Transaction.objects.all()}, status=200 if res else 500)
--------------------------------------------------------------------------------
[0.18889 s] survived
[*] Mutation score [4.97969 s]: 51.3%
   - all: 39
   - killed: 20 (51.3%)
   - survived: 19 (48.7%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
